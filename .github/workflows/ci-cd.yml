# .github/workflows/ci-cd.yml

name: Spring Boot CI/CD with Docker and Kubernetes Manifest

on:
  push:
    branches:
      - main

permissions:
  contents: write

env:
  # 본인의 Docker Hub ID와 이미지 이름으로 수정하세요.
  IMAGE_NAME: jewook2/kubepopol

jobs:
  # 첫 번째 Job: 소스코드를 빌드하고 Docker 이미지를 생성하여 푸시합니다.
  build-and-push:
    runs-on: ubuntu-latest
    # 이 Job의 결과를 다음 Job에서 사용할 수 있도록 outputs를 정의합니다.
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      # 생성된 태그 중 가장 중요한 commit sha 태그를 명시적으로 출력합니다.
      # 예: jewook2/kubepopol:a1b2c3d
      digest: ${{ steps.build-and-push.outputs.digest }}

    steps:
      # 1. Github Repository의 소스코드를 가져옵니다.
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Java (JDK 17) 환경을 설정합니다. (Spring Boot 빌드를 위해 필수)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # 3. Gradle 스크립트에 실행 권한을 부여합니다. (Maven 사용 시 불필요)
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle을 사용하여 Spring Boot 프로젝트를 빌드하고 .jar 파일을 생성합니다. (필수!)
      - name: Build with Gradle
        run: ./gradlew bootJar

      # 5. Docker Hub에 안전하게 로그인합니다. (Github Secrets 사용)
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Git 정보를 기반으로 Docker 이미지 태그와 레이블을 자동으로 생성합니다.
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          # main 브랜치 push 시: latest, commit-sha 두 개의 태그를 생성d
          tags: |
            type=schedule
            type=ref,event=branch
            type=sha

      # 7. Docker 이미지를 빌드하고 Docker Hub에 푸시합니다.
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 두 번째 Job: 생성된 이미지 태그로 Kubernetes Manifest 파일을 업데이트합니다.
  update-manifest:
    # 'build-and-push' Job이 성공해야만 이 Job이 실행됩니다.
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 1. Manifest 파일이 있는 브랜치를 checkout 합니다.
      # (간단하게 main 브랜치를 사용하도록 수정. manifest 브랜치를 사용하려면 ref: manifest 로 변경)
      - name: Checkout manifest repository
        uses: actions/checkout@v4
        # with:
        #   ref: manifest

      # 2. Kubernetes deployment.yaml 파일의 이미지 태그를 업데이트합니다.
      - name: Update image tag in deployment.yaml
        run: |
          # 이전 Job의 출력(digest)을 사용하여 이미지 태그를 정확히 지정합니다.
          # sed 명령어를 사용하여 'image:' 라인을 찾아 새 이미지 태그로 교체합니다.
          sed -i 's|image: .*|image: ${{ needs.build-and-push.outputs.digest }}|g' k8s/deployment.yaml

      # 3. 변경된 Manifest 파일을 Github Repository에 다시 commit & push 합니다.
      - name: Commit and push to manifest branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add k8s/deployment.yaml
          git commit -m "Update image to ${{ needs.build-and-push.outputs.digest }}"
          git push origin main # (manifest 브랜치를 사용한다면 'git push origin manifest'로 변경)